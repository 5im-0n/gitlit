{"version":3,"sources":["src/PNotifyReference.html"],"names":[],"mappings":"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","sourcesContent":["<!-- This file is for referencing while you are making a PNotify module. -->\n{#if putThing} <!-- We want to check to make sure the notice should include our thing. -->\n  <!--\n  We're going to create a button that will be appended to the notice.\n  It will be disabled by default, so we can enable it on mouseover.\n  -->\n  <button\n      ref:thingElem\n      class=\"ui-pnotify-reference-button btn btn-default\"\n      type=\"button\"\n      disabled=\"{!_mouseIsIn}\"\n      on:click=\"doSomething()\">\n    <i class=\"{_notice.get()._icons.athing}\" />&nbsp;{labels.text}\n  </button>\n  <!-- Since our button is floated, we have to add a clearing div. -->\n  <div class=\"ui-pnotify-reference-clearing\" />\n{/if}\n\n<script>\n  import PNotify from './PNotify.html';\n\n  export default {\n    setup (Component) {\n      // This is the key you use for registering your module with PNotify.\n      Component.key = 'Reference';\n\n      // This if the default values of your options.\n      Component.defaults = {\n        // Provide a thing for stuff. Turned off by default.\n        putThing: false,\n        // If you are displaying any text, you should use a labels options to\n        // support internationalization.\n        labels: {\n          text: 'Spin Around'\n        }\n      };\n\n      // This is the first way to init a module. If you aren't placing any\n      // markup in the template, you would do this.\n      // Component.init = (_notice) => {\n      //   return new Component({target: document.body, data: {_notice}});\n      // };\n\n      // Register the module with PNotify.\n      PNotify.modules.Reference = Component;\n      // Append our markup to the container.\n      PNotify.modulesAppendContainer.push(Component);\n\n      // This is where you would add any styling or icons classes you are using in your code.\n      Object.assign(PNotify.icons.brighttheme, {\n        athing: 'bt-icon bt-icon-refresh'\n      });\n      Object.assign(PNotify.icons.bootstrap3, {\n        athing: 'glyphicon glyphicon-refresh'\n      });\n      Object.assign(PNotify.icons.fontawesome4, {\n        athing: 'fa fa-refresh'\n      });\n      Object.assign(PNotify.icons.fontawesome5, {\n        athing: 'fas fa-sync'\n      });\n      if (!PNotify.icons.material) {\n        PNotify.icons.material = {};\n      }\n      Object.assign(PNotify.icons.material, {\n        athing: 'material-icons pnotify-material-icon-refresh'\n      });\n    },\n\n    oncreate () {\n      // This is the second way to init a module. Because we put markup in the\n      // template, we have to fire this event to tell the core that we are ready\n      // to receive our options.\n      this.fire('init', { module: this });\n    },\n\n    data () {\n      return Object.assign({\n        '_notice': null, // The PNotify notice.\n        '_options': {}, // The options for the notice.\n        '_mouseIsIn': false\n      }, PNotify.modules.Reference.defaults);\n    },\n\n    methods: {\n      // This method is called from the core to give us our actual options.\n      // Until it is called, our options will just be the defaults.\n      initModule (options) {\n        // Set our options.\n        this.set(options);\n        // Now that the notice is available to us, we can listen to events fired\n        // from it.\n        const { _notice } = this.get();\n        _notice.on('mouseenter', () => this.set({ '_mouseIsIn': true }));\n        _notice.on('mouseleave', () => this.set({ '_mouseIsIn': false }));\n      },\n\n      doSomething () {\n        // Spin the notice around.\n        let curAngle = 0;\n        const { _notice } = this.get();\n        const timer = setInterval(() => {\n          curAngle += 10;\n          if (curAngle === 360) {\n            curAngle = 0;\n            clearInterval(timer);\n          }\n          _notice.refs.elem.style.transform = 'rotate(' + curAngle + 'deg)';\n        }, 20);\n      },\n\n      // I have nothing to put in these, just showing you that they exist. You\n      // won't need to include them if you aren't using them.\n      update () {\n        // Called when the notice is updating its options.\n      },\n      beforeOpen () {\n        // Called before the notice is opened.\n      },\n      afterOpen () {\n        // Called after the notice is opened.\n      },\n      beforeClose () {\n        // Called before the notice is closed.\n      },\n      afterClose () {\n        // Called after the notice is closed.\n      },\n      beforeDestroy () {\n        // Called before the notice is destroyed.\n      },\n      afterDestroy () {\n        // Called after the notice is destroyed.\n      }\n    }\n  };\n</script>\n\n<style>\n  .ui-pnotify-reference-button {\n    float: right;\n  }\n  .ui-pnotify-reference-clearing {\n    clear: right;\n    line-height: 0;\n  }\n</style>\n"]}