{"version":3,"sources":["src/PNotifyHistory.html"],"names":[],"mappings":"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","sourcesContent":["<script>\n  import PNotify from './PNotify.html';\n\n  export default {\n    setup (Component) {\n      Component.key = 'History';\n\n      Component.defaults = {\n        // Place the notice in the history.\n        history: true,\n        // Maximum number of notices to have open in its stack.\n        maxInStack: Infinity\n      };\n\n      Component.init = (notice) => {\n        return new Component({ target: document.body });\n      };\n\n      Component.showLast = (stack) => {\n        if (stack === undefined) {\n          stack = PNotify.defaultStack;\n        }\n        if (stack === false) {\n          return;\n        }\n        const top = (stack.push === 'top');\n\n        // Look up the last history notice, and display it.\n        let i = (top ? 0 : PNotify.notices.length - 1);\n\n        let notice;\n        do {\n          notice = PNotify.notices[i];\n\n          if (!notice) {\n            return;\n          }\n\n          i += (top ? 1 : -1);\n        } while (\n          notice.get().stack !== stack ||\n          !notice.get()._modules.History.get().history ||\n          notice.get()._state === 'opening' ||\n          notice.get()._state === 'open'\n        );\n\n        notice.open();\n      };\n\n      Component.showAll = (stack) => {\n        if (stack === undefined) {\n          stack = PNotify.defaultStack;\n        }\n        if (stack === false) {\n          return;\n        }\n\n        // Display all notices. (Disregarding non-history notices.)\n        for (let i = 0; i < PNotify.notices.length; i++) {\n          const notice = PNotify.notices[i];\n          if (\n            (\n              stack === true ||\n              notice.get().stack === stack\n            ) &&\n            notice.get()._modules.History.get().history\n          ) {\n            notice.open();\n          }\n        }\n      };\n\n      // Register the module with PNotify.\n      PNotify.modules.History = Component;\n    },\n\n    data () {\n      return Object.assign({\n        '_notice': null, // The PNotify notice.\n        '_options': {} // The options for the notice.\n      }, PNotify.modules.History.defaults);\n    },\n\n    methods: {\n      initModule (options) {\n        this.set(options);\n\n        if (this.get().history) {\n          // Don't destroy notices that are in history.\n          const { _notice } = this.get();\n          if (_notice.get().destroy) {\n            _notice.set({ 'destroy': false });\n          }\n        }\n      },\n\n      beforeOpen () {\n        const { maxInStack, _options } = this.get();\n        if (maxInStack === Infinity) {\n          return;\n        }\n\n        const stack = _options.stack;\n        if (stack === false) {\n          return;\n        }\n\n        // Remove oldest notifications leaving only maxInStack from the stack.\n        if (PNotify.notices && (PNotify.notices.length > maxInStack)) {\n          // Oldest are normally in front of array, or if stack.push=='top' then\n          // they are at the end of the array!\n          const top = stack.push === 'top';\n          const forRemoval = [];\n          let currentOpen = 0;\n\n          for (let i = (top ? 0 : PNotify.notices.length - 1); (top ? i < PNotify.notices.length : i >= 0); (top ? i++ : i--)) {\n            if (\n              ['opening', 'open'].indexOf(PNotify.notices[i].get()._state) !== -1 &&\n              PNotify.notices[i].get().stack === stack\n            ) {\n              if (currentOpen >= maxInStack) {\n                forRemoval.push(PNotify.notices[i]);\n              } else {\n                currentOpen++;\n              }\n            }\n          }\n\n          for (let i = 0; i < forRemoval.length; i++) {\n            forRemoval[i].close(false);\n          }\n        }\n      }\n    }\n  };\n</script>\n"]}