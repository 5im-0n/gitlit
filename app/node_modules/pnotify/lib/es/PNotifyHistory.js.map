{"version":3,"file":"PNotifyHistory.js","sources":["src/PNotifyHistory.html"],"sourcesContent":["<script>\n  import PNotify from './PNotify.html';\n\n  export default {\n    setup (Component) {\n      Component.key = 'History';\n\n      Component.defaults = {\n        // Place the notice in the history.\n        history: true,\n        // Maximum number of notices to have open in its stack.\n        maxInStack: Infinity\n      };\n\n      Component.init = (notice) => {\n        return new Component({target: document.body});\n      };\n\n      Component.showLast = (stack) => {\n        if (stack === undefined) {\n          stack = PNotify.defaultStack;\n        }\n        if (stack === false) {\n          return;\n        }\n        const top = (stack.push === 'top');\n\n        // Look up the last history notice, and display it.\n        let i = (top ? 0 : PNotify.notices.length - 1);\n\n        let notice;\n        do {\n          notice = PNotify.notices[i];\n\n          if (!notice) {\n            return;\n          }\n\n          i += (top ? 1 : -1);\n        } while (\n          notice.get().stack !== stack ||\n          !notice.get()._modules.History.get().history ||\n          notice.get()._state === 'opening' ||\n          notice.get()._state === 'open'\n        );\n\n        notice.open();\n      };\n\n      Component.showAll = (stack) => {\n        if (stack === undefined) {\n          stack = PNotify.defaultStack;\n        }\n        if (stack === false) {\n          return;\n        }\n\n        // Display all notices. (Disregarding non-history notices.)\n        for (let i = 0; i < PNotify.notices.length; i++) {\n          const notice = PNotify.notices[i];\n          if (\n            (\n              stack === true ||\n              notice.get().stack === stack\n            ) &&\n            notice.get()._modules.History.get().history\n          ) {\n            notice.open();\n          }\n        }\n      };\n\n      // Register the module with PNotify.\n      PNotify.modules.History = Component;\n    },\n\n    data () {\n      return Object.assign({\n        '_notice': null, // The PNotify notice.\n        '_options': {} // The options for the notice.\n      }, PNotify.modules.History.defaults);\n    },\n\n    methods: {\n      initModule (options) {\n        this.set(options);\n\n        if (this.get().history) {\n          // Don't destroy notices that are in history.\n          const {_notice} = this.get();\n          if (_notice.get().destroy) {\n            _notice.set({'destroy': false});\n          }\n        }\n      },\n\n      beforeOpen () {\n        const {maxInStack, _options} = this.get();\n        if (maxInStack === Infinity) {\n          return;\n        }\n\n        const stack = _options.stack;\n        if (stack === false) {\n          return;\n        }\n\n        // Remove oldest notifications leaving only maxInStack from the stack.\n        if (PNotify.notices && (PNotify.notices.length > maxInStack)) {\n          // Oldest are normally in front of array, or if stack.push=='top' then\n          // they are at the end of the array!\n          const top = stack.push === 'top';\n          const forRemoval = [];\n          let currentOpen = 0;\n\n          for (let i = (top ? 0 : PNotify.notices.length - 1); (top ? i < PNotify.notices.length : i >= 0); (top ? i++ : i--)) {\n            if (\n              ['opening', 'open'].indexOf(PNotify.notices[i].get()._state) !== -1 &&\n              PNotify.notices[i].get().stack === stack\n            ) {\n              if (currentOpen >= maxInStack) {\n                forRemoval.push(PNotify.notices[i]);\n              } else {\n                currentOpen++;\n              }\n            }\n          }\n\n          for (let i = 0; i < forRemoval.length; i++) {\n            forRemoval[i].close(false);\n          }\n        }\n      }\n    }\n  };\n</script>\n"],"names":[],"mappings":"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"}